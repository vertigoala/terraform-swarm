
- hosts: all
  become: yes
  tasks:
  - name: Install prerequisites
    become: yes
    apt:
      name: ['apt-transport-https','ca-certificates','curl','gnupg2','software-properties-common']
      update_cache: yes

  - name: Add Docker GPG key
    become: yes
    apt_key: url=https://download.docker.com/linux/ubuntu/gpg

  - name: Add Docker APT repository
    become: yes
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable

  - name: Install Docker
    become: yes
    apt:
      name: ['docker-ce','docker-ce-cli','containerd.io']
      update_cache: yes

  - name: Create docker group
    become: yes
    group:
      name: docker
      state: present

  - name: User ubuntu in docker group
    become: yes
    user:
      name: ubuntu
      group: docker
      append: yes

  - name: "get docker info"
    shell: docker info
    register: docker_info
    changed_when: False
  - name: Declare the address of the first Swarm manager as a fact.
    set_fact:
      swarm_manager_address: "{{ ansible_eth0['ipv4']['address'] }}:2377"
    when: inventory_hostname == groups['managers'][0]
  - name: Distribute the fact containing address of the first Swarm manager.
    set_fact:
      swarm_manager_address: "{{ hostvars[groups['managers'][0]]['swarm_manager_address'] }}"
    when: inventory_hostname != groups['managers'][0]

  - name: "swarm init first manager"
    shell: "docker swarm init --advertise-addr {{ swarm_manager_address }}"
    when: "docker_info.stdout.find('Swarm: active') == -1 and inventory_hostname == groups['managers'][0]"

  - name: "get docker swarm worker token"
    shell: docker swarm join-token -q worker
    register: worker_token
    changed_when: False
    when: inventory_hostname == groups['managers'][0]
  - name: "join swarm as a worker"
    shell: "docker swarm join --token {{ hostvars[groups['managers'][0]]['worker_token']['stdout'] }} {{ swarm_manager_address }}"
    when: "'workers' in groups and docker_info.stdout.find('Swarm: active') == -1 and inventory_hostname in groups['workers']"

  - name: "get docker swarm manager token"
    shell: docker swarm join-token -q manager
    register: manager_token
    changed_when: False
    when: inventory_hostname == groups['managers'][0]
  - name: "join swarm as a manager"
    shell: "docker swarm join --token {{ hostvars[groups['managers'][0]]['manager_token']['stdout'] }} {{ swarm_manager_address }}"
    when: "docker_info.stdout.find('Swarm: active') == -1 and inventory_hostname in groups['managers'] and inventory_hostname != groups['managers'][0]"

  - name: "get docker node list"
    shell: docker node ls
    register: docker_nodes
    changed_when: False
    when: inventory_hostname == groups['managers'][0]

  - name: Debug join cluster
    debug:
      var: docker_nodes
    when: inventory_hostname == groups['managers'][0]

  #
  # For the time being we will pin services with shared folders on the same host (we will need labels for that)
  # Later on we will work with external volumes (like in kubernetes)
  #
  - name: Set worker node labels
    shell: "docker node update --label-add alanode=worker{{ my_idx }} {{ hostvars[item]['ansible_hostname'] }}"
    #loop: "{{ query('inventory_hostnames', 'managers') }}"
    loop: "{{ groups['workers'] }}"
    loop_control:
      index_var: my_idx
    when: "'workers' in groups and inventory_hostname == groups['managers'][0]"

  - name: Set manager node labels
    shell: "docker node update --label-add alanode=manager{{ my_idx }} {{ hostvars[item]['ansible_hostname'] }}"
    #loop: "{{ query('inventory_hostnames', 'managers') }}"
    loop: "{{ groups['managers'] }}"
    loop_control:
      index_var: my_idx
    when: inventory_hostname == groups['managers'][0]

  # - name: loop test
  #   debug:
  #     msg: "{{ hostvars[item]['ansible_hostname'] }}"
  #   #loop: "{{ query('inventory_hostnames', 'managers') }}"
  #   loop: "{{ groups['workers'] }}"
  #   loop_control:
  #     index_var: my_idx
  #   when: inventory_hostname == groups['managers'][0]
